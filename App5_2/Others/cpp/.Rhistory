for(j in 1:length(xis)){
mul = mu[-index] + H[-index,index]*(1/H[index,index])*(xis[j] -mu[index])
pila[j] = (((calc_ljoint(A,append(mul,xis[j],index-1),(sigmanovo),Ad,K1,K2))))
}
return(list(pila = pila,xis = xis))
}
teste2 = function(index,mu,sigma_beta,H,sigmanovo,max){
xis = xis_c2(index,max)
pila = vector()
for(j in 1:length(xis)){
mul = mu[-index] + H[-index,index]*(1/H[index,index])*(xis[j] -mu[index])
pila[j] = (((calc_ljoint(A,append(mul,xis[j],index-1),(sigmanovo),Ad,K1,K2))))
}
pila_norm = exp(pila - mean(pila))/(calc_Z(xis,pila - mean(pila)))
return(pila_norm)
}
calc_Z = function(alpha_vec, lpost_vec) {
nn = length(alpha_vec)
hh = alpha_vec[2] - alpha_vec[1]
ww = c(1, rep(c(4,2), (nn-2)/2), c(4,1))
return(sum(ww * exp(lpost_vec)) * hh / 3)
}
marginal = function(index,pila){
pila_marginal = vector()
xis = xis_c2(index,maximos)
for(j in 1:length(xis)){
pila_marginal[j] = sum(sapply(lapply(1:(length(sigma)), function(i) pila[[i]][,index]),'[[',j)*lpost2_norm*diff(sigma)[1])
}
return(list(pila_marginal = pila_marginal, xis = xis))
}
posti =  mclapply(seq(1:(length(index))),teste,mu = mu_ini,sigma_beta = sigma_ini,H=H,sigmanovo = c(sigmamod), mc.cores = 3)
maximos_ind = sapply(lapply(posti,sapply,which.max),'[[',1)
maximos = vector()
for(j in 1:length(mu_ini)){
maximos[j] = sapply(posti,'[[',2,simplify = FALSE)[[j]][maximos_ind[j]]
}
nx = 6
ny = 6
xy.coarse <- cbind( rep( seq(sigmamod[1] -1,sigmamod[1] + 1,length = nx), each=ny), rep(seq(sigmamod[2] -1,sigmamod[2] + 1,length = nx),ny ) )
points_t = xy.coarse
lista =  as.list(as.data.frame(t(xy.coarse)))
post_x2 =  mclapply(lista, function(alpha_) {
mode_ = calc_x02(alpha_,xin,Matrix(A,sparse = T),Matrix(Al,sparse = T),indext,K1,K2,K3,X)
H1 = calc_neg_hess_ff42(mode_,alpha_)
chol_H_ = chol(H1)
H = chol2inv(chol_H_)
ta = mclapply(seq(1:ncol(A)), function (ii){
Append(matrix(kronecker.prod(xis_c2(ii,maximos) -mode_[ii],H[-ii,ii]*(1/H[ii,ii])),ncol = 41,nrow = ncol(A) - 1) + mode_[-ii]
,xis_c2(ii,maximos),after = ii - 1,rows = TRUE)})
pila = apply_to_list_parallel(ta,A,alpha_,Al,K1,K2,K3,X,indext)
posti = mclapply(seq(1:ncol(A)),normal,pila = pila,mc.cores 3)
post_x2 =  mclapply(lista, function(alpha_) {
mode_ = calc_x02(alpha_,xin,Matrix(A,sparse = T),Matrix(Al,sparse = T),indext,K1,K2,K3,X)
H1 = calc_neg_hess_ff42(mode_,alpha_)
chol_H_ = chol(H1)
H = chol2inv(chol_H_)
ta = mclapply(seq(1:ncol(A)), function (ii){
Append(matrix(kronecker.prod(xis_c2(ii,maximos) -mode_[ii],H[-ii,ii]*(1/H[ii,ii])),ncol = 41,nrow = ncol(A) - 1) + mode_[-ii]
,xis_c2(ii,maximos),after = ii - 1,rows = TRUE)})
pila = apply_to_list_parallel(ta,A,alpha_,Al,K1,K2,K3,X,indext)
posti = mclapply(seq(1:ncol(A)),normal,pila = pila,mc.cores =3)
return(list(
sigma = points_t,
maximos = maximos,
H1 = H1,
mu_ini = mu_ini,
sigma_ini = sigma_ini,
alpha = alpha_,
x0 = mode_,
posti_cond = posti,
diag_sigma = drop(diag(chol2inv(chol_H_))),
unn_log_post = calc_ljoint(A,mode_, alpha_, Al,K1,K2)- sum(log(diag(chol_H_)))
))
},mc.cores = 3)
lista =  as.list(as.data.frame(t(xy.coarse)))
post_x2 =  mclapply(lista, function(alpha_) {
mode_ = calc_x02(alpha_,xin,Matrix(A,sparse = T),Matrix(Al,sparse = T),indext,K1,K2,K3,X)
H1 = calc_neg_hess_ff42(mode_,alpha_)
chol_H_ = chol(H1)
H = chol2inv(chol_H_)
ta = mclapply(seq(1:ncol(A)), function (ii){
Append(matrix(kronecker.prod(xis_c2(ii,maximos) -mode_[ii],H[-ii,ii]*(1/H[ii,ii])),ncol = 41,nrow = ncol(A) - 1) + mode_[-ii]
,xis_c2(ii,maximos),after = ii - 1,rows = TRUE)})
pila = apply_to_list_parallel(ta,A,alpha_,Al,K1,K2,K3,X,indext)
posti = lapply(seq(1:ncol(A)),normal,pila = pila)
return(list(
sigma = points_t,
maximos = maximos,
H1 = H1,
mu_ini = mu_ini,
sigma_ini = sigma_ini,
alpha = alpha_,
x0 = mode_,
posti_cond = posti,
diag_sigma = drop(diag(chol2inv(chol_H_))),
unn_log_post = calc_ljoint(A,mode_, alpha_, Al,K1,K2)- sum(log(diag(chol_H_)))
))
},mc.cores = 3)
lista =  as.list(as.data.frame(t(xy.coarse)))
calc_neg_hess_ff42
lista =  as.list(as.data.frame(t(xy.coarse)))
post_x2 =  lapply(lista, function(alpha_) {
mode_ = calc_x02(alpha_,xin,Matrix(A,sparse = T),Matrix(Al,sparse = T),indext,K1,K2,K3,X)
H1 = calc_neg_hess_ff42(mode_,alpha_)
chol_H_ = chol(H1)
H = chol2inv(chol_H_)
ta = mclapply(seq(1:ncol(A)), function (ii){
Append(matrix(kronecker.prod(xis_c2(ii,maximos) -mode_[ii],H[-ii,ii]*(1/H[ii,ii])),ncol = 41,nrow = ncol(A) - 1) + mode_[-ii]
,xis_c2(ii,maximos),after = ii - 1,rows = TRUE)})
pila = apply_to_list_parallel(ta,A,alpha_,Al,K1,K2,K3,X,indext)
posti = lapply(seq(1:ncol(A)),normal,pila = pila)
return(list(
sigma = points_t,
maximos = maximos,
H1 = H1,
mu_ini = mu_ini,
sigma_ini = sigma_ini,
alpha = alpha_,
x0 = mode_,
posti_cond = posti,
diag_sigma = drop(diag(chol2inv(chol_H_))),
unn_log_post = calc_ljoint(A,mode_, alpha_, Al,K1,K2)- sum(log(diag(chol_H_)))
))
})
bctm_vcm = function(A,Al,X,K1,K2,K3,q,index){
n = length(y)
Dp1 = diag(10^(-6),ncol(K1),ncol(K1))
Dp2 = diag(10^(-6),ncol(K2),ncol(K2))
Cbeta = function(beta,index){
cbetat = rep(1,length = length(index))
cbetat[index] = exp(beta[index])
return(diag(cbetat))
}
Cbetal = function(beta,index){
cbetat = rep(0,length = length(index))
cbetat[index] = exp(beta[index])
return(diag(cbetat))
}
K1 = K1 + Dp1
K2 = K2 + Dp2
K = function(sigma,K1,K2,K3){
as.matrix(drop(bdiag(drop(bdiag(exp(sigma[1])*K1,exp(sigma[2])*K2)),diag(c(rep(10^{-6},ncol(X)))))))
}
calc_lprior = function(sigma){
sum(dhalfcauchy(exp(sigma),scale = 25,log = TRUE))
}
gamma_f = function(beta,index){
gammat = vector(length = length(index))
gammat[index] = exp(beta[index])
gammat[!index] = beta[!index]
return(gammat)
}
calc_ljoint = function(A,beta, sigma,  Al,K1,K2,K3){
gamma = gamma_f(beta,index)
chol_Q = K(sigma,K1,K2,K3) %>% chol
logdet_Q_half = chol_Q %>% diag %>% log %>% sum
quad_form = crossprod(chol_Q %*% beta) %>% drop
res = sum(dnorm(A%*%gamma,0,1,log = TRUE)) + sum(log(Al%*%gamma)) + logdet_Q_half - 0.5*quad_form + calc_lprior(sigma)+ sum(beta[index]) + sum(sigma)
return(res)
}
calc_ff = function(beta,sigma){
gamma = gamma_f(beta,index)
if(all(Al%*%gamma > 0)){
sum(dnorm(A%*%gamma,0,1,log = TRUE)) + sum(log(Al%*%gamma)) -
0.5 * (as.matrix(drop(beta%*% K(sigma,K1,K2,K3) %*% beta))) + sum(beta[index])
}else{-10000000}
}
calc_grad_ff = function(beta, sigma){
gamma = gamma_f(beta,index)
cbetat = rep(0,length = length(index))
cbetat[index] = rep(1, sum(index))
apply(((c(-A%*%gamma)*A)%*%Cbeta(beta,index)),2,sum) +
apply((Al)%*%Cbeta(beta,index)/c(Al%*%gamma),2,sum) -
drop(as.matrix(K(sigma,K1,K2,K3) %*% beta)) + cbetat
}
normal = function(index,pila){
return(exp(pila[[index]] - mean(pila[[index]]))/(calc_Z(xis_c2(index,maximos),pila[[index]] - mean(pila[[index]]))))
}
calc_neg_hess_ff4 = function(beta,sigma){
gamma = gamma_f(beta,index)
Hess =  t(A%*%Cbeta(beta,index))%*%(-A%*%Cbeta(beta,index)) + diag(as.vector((t(A%*%Cbetal(beta,index)))%*%-A%*%gamma)) +
(((c(1/(Al%*%gamma)))^2)*t(Al%*%Cbeta(beta,index)))%*%(-Al%*%Cbeta(beta,index)) +
diag(as.vector((t(Al%*%Cbetal(beta,index)))%*%(1/Al%*%gamma)))
return(-(Hess - K(sigma,K1,K2,K3)))
}
calc_neg_hess_ff42 <- function(beta, sigma) {
gamma <- gamma_f(beta, index)
# Pré-calcular operações recorrentes
Cb <- A %*% Cbeta(beta, index)          # Evita múltiplos cálculos
Cbl <- A %*% Cbetal(beta, index)        # Evita múltiplos cálculos
Al_gamma <- Al %*% gamma
# Matrizes diagonais esparsas
D1 <- Matrix::Diagonal(x = 1 / as.vector(Al_gamma))
D2 <- Matrix::Diagonal(x = as.vector(t(Cbl) %*% (-A %*% gamma)))
D3 <- Matrix::Diagonal(x = as.vector((t(Al %*% Cbetal(beta, index))) %*% (1 / Al_gamma)))
# Constrói a Hessiana esparsa
Hess <- t(Cb) %*% (-Cb) +
D2 +
t(D1 %*% Al %*% Cbeta(beta, index)) %*% (D1 %*% (-Al %*% Cbeta(beta, index))) +
D3
# Ajuste final com K
K_term <- K(sigma, K1, K2, K3)
return(-(Hess - K_term))
}
calc_x0 = function(alpha,x0,tol=1e-12) {
x = x0
cont = 0
while(1) {
g1 = calc_grad_ff(x,alpha)
cont = cont +1
H = as.matrix(-calc_neg_hess_ff42(x,alpha))
#x = t((-t(0.5*x0)%*%H + g1)%*%solve(H))
#x = solve(H)%*%t(((x0)%*%H - g1))
x = x - solve(H)%*%(g1)
if (mean((x-x0)^2 < tol)) {
break;
}
if(cont == 50){
#x = calc_x0_brute(alpha)[[1]]
break;
} else {
x0 = x
}
}
return(x)
}
calc_lpost32 <- function(sigma, xin) {
cache_env <- new.env()
if (!is.null(cache_env$x0)) {
xin <- cache_env$x0
}
x0 = calc_x02(sigma,rep(1,length(index)),Matrix(A, sparse = TRUE),Matrix(Al, sparse = TRUE),indext,K1,K2,K3,X)
cache_env$x0 <- x0
H <- calc_neg_hess_ff422(x0, sigma, Matrix(A,sparse = TRUE), Matrix(Al,sparse = TRUE),
K1,K2,K3,X,index)
diag_chol_h <- diag(chol(H))
ljoint <- calc_ljoint(A, x0, sigma, Al, K1, K2, K3)
log_det <- sum(log(diag_chol_h))
lpost <- ljoint + (n / 2) * log(2 * pi) - log_det
return(lpost)
}
xin = calc_x02(c(1,1),rep(1,length(index)), Matrix(A,sparse = TRUE),Matrix(Ad,sparse = TRUE),indext, K1,K2,K3,X)
d = optim(par = c(0,0), fn = calc_lpost32,xin = xin, method = "L-BFGS-B",
control=list(fnscale=-1,maxit = 5000,trace = TRUE),hessian = TRUE)
sigmamod = d$par
sd_sigma = d$hessian
mu_ini = calc_x02(sigmamod,xin, Matrix(A,sparse = TRUE),Matrix(Ad,sparse = TRUE),index, K1,K2,K3,X)
H = chol2inv(chol(calc_neg_hess_ff42(mu_ini,sigmamod)))
sigma_ini = sqrt(diag(H))
xis_c = function(index){
return(seq(mu_ini[index]-5.1*sqrt(sigma_ini[index]),mu_ini[index]+5.1*sqrt(sigma_ini[index]),length = 61))
}
xis_c2 = function(index,max){
if(index %in% which(indext == FALSE)){
return(seq(max[index]-2.5*sqrt(sigma_ini[index]),max[index]+2.5*sqrt(sigma_ini[index]),length = 41))
}else{
return(seq(max[index]-2.5*sqrt(sigma_ini[index]),max[index]+2.5*sqrt(sigma_ini[index]),length = 41))
}
}
teste = function(index,mu,sigma_beta,H,sigmanovo){
xis = xis_c(index)
pila = vector()
for(j in 1:length(xis)){
mul = mu[-index] + H[-index,index]*(1/H[index,index])*(xis[j] -mu[index])
pila[j] = (((calc_ljoint(A,append(mul,xis[j],index-1),(sigmanovo),Ad,K1,K2))))
}
return(list(pila = pila,xis = xis))
}
teste2 = function(index,mu,sigma_beta,H,sigmanovo,max){
xis = xis_c2(index,max)
pila = vector()
for(j in 1:length(xis)){
mul = mu[-index] + H[-index,index]*(1/H[index,index])*(xis[j] -mu[index])
pila[j] = (((calc_ljoint(A,append(mul,xis[j],index-1),(sigmanovo),Ad,K1,K2))))
}
pila_norm = exp(pila - mean(pila))/(calc_Z(xis,pila - mean(pila)))
return(pila_norm)
}
calc_Z = function(alpha_vec, lpost_vec) {
nn = length(alpha_vec)
hh = alpha_vec[2] - alpha_vec[1]
ww = c(1, rep(c(4,2), (nn-2)/2), c(4,1))
return(sum(ww * exp(lpost_vec)) * hh / 3)
}
marginal = function(index,pila){
pila_marginal = vector()
xis = xis_c2(index,maximos)
for(j in 1:length(xis)){
pila_marginal[j] = sum(sapply(lapply(1:(length(sigma)), function(i) pila[[i]][,index]),'[[',j)*lpost2_norm*diff(sigma)[1])
}
return(list(pila_marginal = pila_marginal, xis = xis))
}
posti =  mclapply(seq(1:(length(index))),teste,mu = mu_ini,sigma_beta = sigma_ini,H=H,sigmanovo = c(sigmamod), mc.cores = 3)
maximos_ind = sapply(lapply(posti,sapply,which.max),'[[',1)
maximos = vector()
for(j in 1:length(mu_ini)){
maximos[j] = sapply(posti,'[[',2,simplify = FALSE)[[j]][maximos_ind[j]]
}
nx = 6
ny = 6
xy.coarse <- cbind( rep( seq(sigmamod[1] -1,sigmamod[1] + 1,length = nx), each=ny), rep(seq(sigmamod[2] -1,sigmamod[2] + 1,length = nx),ny ) )
points_t = xy.coarse
lista =  as.list(as.data.frame(t(xy.coarse)))
post_x2 =  lapply(lista, function(alpha_) {
mode_ = calc_x02(alpha_,xin,Matrix(A,sparse = T),Matrix(Al,sparse = T),indext,K1,K2,K3,X)
H1 = calc_neg_hess_ff42(mode_,alpha_)
chol_H_ = chol(H1)
H = chol2inv(chol_H_)
ta = mclapply(seq(1:ncol(A)), function (ii){
Append(matrix(kronecker.prod(xis_c2(ii,maximos) -mode_[ii],H[-ii,ii]*(1/H[ii,ii])),ncol = 41,nrow = ncol(A) - 1) + mode_[-ii]
,xis_c2(ii,maximos),after = ii - 1,rows = TRUE)})
pila = apply_to_list_parallel(ta,A,alpha_,Al,K1,K2,K3,X,indext)
posti = lapply(seq(1:ncol(A)),normal,pila = pila)
return(list(
sigma = points_t,
maximos = maximos,
H1 = H1,
mu_ini = mu_ini,
sigma_ini = sigma_ini,
alpha = alpha_,
x0 = mode_,
posti_cond = posti,
diag_sigma = drop(diag(chol2inv(chol_H_))),
unn_log_post = calc_ljoint(A,mode_, alpha_, Al,K1,K2)- sum(log(diag(chol_H_)))
))
})
return(post_x2)
stopCluster(cl)
}
## Fitting the model ##################################################
##################################################
system.time({m13 = bctm_vcm(A,Ad,X,K1,K2,K3,q,indext)})
#### Auxiliar functions ##################################################
marginal = function(index,pila,maximos,sigma_ini,lista,lpost,weight){
pila_marginal = vector()
xis = xis_c2(index,maximos)
mar = function(j){
return(sum(sapply(lapply(1:(length(lista)), function(i) pila[[i]][,index]),'[[',j)*(lpost*weight)))
}
pila_marginal = unlist(map(1:length(xis), mar))
return(list(pila_marginal = as.vector(pila_marginal), xis = xis))
}
xis_c2 = function(index,max){
if(index %in% which(indext == FALSE)){
return(seq(max[index]-2.5*sqrt(sigma_ini[index]),max[index]+2.5*sqrt(sigma_ini[index]),length = 41))
}else{
return(seq(max[index]-2.5*sqrt(sigma_ini[index]),max[index]+2.5*sqrt(sigma_ini[index]),length = 41))
}
}
post_multi = list()
points_t = m13[[1]]$sigma #extracting the points explored from the hyperparameter posterior distribution
maximos = m13[[2]]$maximos # getting the maximum of the parameters posterior pdf
sigma_ini = m13[[2]]$sigma_ini # Diagonal of the Hessian amtrix of the laplace approximation for (beta|y, tau),
#it is the variance parameters of the approximated distribution
lista = as.list(as.data.frame(t(points_t)))
unl = (sapply(m13, '[[', 'unn_log_post')) - mean(sapply(m13, `[[`, 'unn_log_post'))
weight = c(abs(diff(points_t[,2])[1])*abs(diff(points_t[,1],6)[1])) # weight for the integral of the hyperparameter distribution
post_alpha  = exp(unl)/(sum(exp(unl)*weight)) ### Hyperparameter posterior distribution normalized
lpost = post_alpha
lpost2 <- cut((post_alpha), 10, label = FALSE)
colr <- rev(heat.colors(10))
plot(points_t[,1] ~ points_t[,2],
col = colr[lpost2], pch = 20)
sum(post_alpha*weight)
pontos = points_t
lpost2_norm = lpost
### extracting the Laplace approximation for (beta|y, tau)
for(j in 1:length(pontos[,1])){
post_multi[[j]] = matrix(unlist(m13[[j]]$posti_cond),nrow = 41,ncol = ncol(A))
}
## calculating the marginals beta_r|y
marginals2 = lapply(1:length(maximos),function(ii) marginal(ii,post_multi, maximos = maximos,sigma_ini = sigma_ini,lista = lista,lpost = lpost,weight = weight))
#library(purrr)
install.packages("purr")
#library(purrr)
install.packages("tidyverse")
library(purrr)
sum(post_alpha*weight)
pontos = points_t
lpost2_norm = lpost
### extracting the Laplace approximation for (beta|y, tau)
for(j in 1:length(pontos[,1])){
post_multi[[j]] = matrix(unlist(m13[[j]]$posti_cond),nrow = 41,ncol = ncol(A))
}
## calculating the marginals beta_r|y
marginals2 = lapply(1:length(maximos),function(ii) marginal(ii,post_multi, maximos = maximos,sigma_ini = sigma_ini,lista = lista,lpost = lpost,weight = weight))
### Simulating values from these marginals
Beta = mclapply(seq(1,length(maximos),1),MH,post_multi,maximos,sigma_ini,lista,lpost,weight,mc.cores =6 )
Beta = matrix(unlist(Beta),ncol = ncol(A),nrow = length(Beta[[1]]))
gamma_f = function(beta,index){
gammat = vector(length = length(index))
gammat[index] = exp(beta[index])
gammat[!index] = beta[!index]
return(gammat)
}
################################################################################################33
############################3 WAIC e DIC ####################################################
Gamma = apply(Beta,1,gamma_f,index = indext)
i = 18 #(36/2) index of the mode of hyperparameter
mu_gaus = m13[[i]]$x0 # mode of beta|y, tau for tau in the i-th position
sigma_gaus = solve(m13[[i]]$H1)  # Hessian matrix of of beta|y, tau for tau in the i-th position
sam = mvrnorm(1000,mu_gaus,(sigma_gaus))
py = vector()
Tj = matrix(0,length(y),length(m13))
Tj2 = matrix(0,length(y),length(m13))
inte = vector()
inte2 = vector()
set.seed(1)
for(i in 1:length(m13)){
print(i)
mu_gaus = m13[[i]]$x0
sigma_gaus = (m13[[i]]$H1)
chol_H_ = chol(sigma_gaus)
sigma_gaus = chol2inv(chol_H_)
sam = mvrnorm(1000,mu_gaus,(sigma_gaus))
Tj[,i] = apply((apply((sam),1,ll_exp, A = A, Al = Ad,index = indext)),1,mean)
Tj2[,i] = apply(apply(sam,1,ll_2,A,Ad,indext),1,mean) - apply(apply(sam,1,ll2,A,Ad,indext),1,mean)^2
inte[i] = mean(apply((sam),1,ll_dev, A = A, Al = Ad,index = indext))
inte2[i] = ll_dev(mu_gaus,A,Ad,indext)
}
WAIC = -2*sum(log(Tj%*%(lpost2_norm*weight))) + 2*sum((Tj2%*%(lpost2_norm*weight)));WAIC
inte_int = sum(inte*lpost2_norm*weight)
beta_mean = apply(Beta,2,mean)
inte2 = ll_dev(beta_mean,A,Ad, indext)
pd = inte_int - inte2;pd
DIC =inte2  +pd;DIC
# function to estimate the conditional distribution functions
prob_estim = function(ind,Gamma){
gamma = t(Gamma)
q = c(20,20)
ynew_o = seq(min(db$cholst)-10,max(db$cholst)+10,1)
ynew = (ynew_o - attr(y,"scaled:center"))/(attr(y,"scaled:scale"))
dfnew = as.data.frame(cbind(ynew))
sspec <- s(cholst, k = 20 , bs = "ps")
sspec$mono <- 1
sm <- smoothCon(sspec, data = df, scale.penalty=FALSE, absorb.cons = F)[[1]]
names(dfnew) = c("cholst")
B = PredictMat(sm, dfnew)
B1 = B*(df$age[ind])
sm$deriv = 1
Bl1 = ((PredictMat(sm,dfnew)))*(df$age[ind])
sm2 <- smoothCon(sspec, data = df, scale.penalty=FALSE, absorb.cons = TRUE)[[1]]
B2 <- PredictMat(sm2,dfnew)
index2 = sm2$g.index
sm2$deriv <- 1
Bl2 <- PredictMat(sm2, dfnew)
X = model.matrix(~1+ age + sex + year,data = df)
B = cbind(B2,B1)
Bl = cbind(Bl2,Bl1)
h1 = B%*%(t(gamma[,1:(q[1] + q[2] - 1)]))
dim(B)
h1l = Bl%*%(t(gamma[,1:(q[1] + q[2] - 1)]))
h2 = X[ind,]%*%t(gamma[,(ncol(A)+1 - ncol(X)):ncol(A)])
h1 = apply(h1,1,mean)
h1l = apply(h1l,1,mean)
h2 = mean(h2)
########################################################3
sspec <- s(cholst, k = 20 , bs = "ps")
sspec$mono <- 1
sm <- smoothCon(sspec, data = df, scale.penalty=FALSE, absorb.cons = F)[[1]]
names(dfnew) = c("cholst")
B = PredictMat(sm, dfnew)
B1 = B*(df$age[ind])
sm$deriv = 1
Bl1 = PredictMat(sm,dfnew)*(df$age[ind])
sm2 <- smoothCon(sspec, data = df, scale.penalty=FALSE, absorb.cons = TRUE)[[1]]
B2 <- PredictMat(sm2,dfnew)
index2 = sm2$g.index
sm2$deriv <- 1
Bl2 <- PredictMat(sm2, dfnew)
X = model.matrix(~1+ sex + year,data = df)
B = cbind(B2,B1)
Bl = cbind(Bl2,Bl1)
bt_samples <-  object_vcm$samples$beta[2000:4000,]
bt_samples[,object_vcm$model$exp_ident] <- exp(bt_samples[,object_vcm$model$exp_ident])
h1c = (B)%*%(t(bt_samples[,2:(q[1] + q[2] )]))
h1lc = (Bl)%*%(t(bt_samples[,2:(q[1] + q[2])]))
h2c = X[ind,]%*%(t(bt_samples[,c(1,(q[1] + q[2]+1):(q[1] + q[2] + 2))]))
#h3c = Xre%*%(t(bt_samples[,(q[1] + q[2] + 3):ncol(A)]))
#h3c = mean(h3c[ind,])
h1c = apply(h1c,1,mean)
h1lc = apply(h1lc,1,mean)
h2c = mean(h2c)
########################################################3
Fa = pnorm(h1 + h2 )
Fac = pnorm(h1c + h2c)
#plot(Fa,type = "l")
#points(Fac, type = "l",col = "blue")
Faord = sort(Fa)
Facord = sort(Fac)
qi = (ynew_o[Faord > 0.05])[1]
qs = (ynew_o[Faord > 0.95])[1]
qm = (ynew_o[Faord > 0.5])[1]
qic = (ynew_o[Facord > 0.05])[1]
qsc = (ynew_o[Facord > 0.95])[1]
qmc = (ynew_o[Facord > 0.5])[1]
res = abs(y[ind] - qm)
resc = abs(y[ind] - qmc)
return(list(dif = abs(Fa- Fac), qi = qi, qic = qic, qs = qs, qsc =qsc,qm = qm, qmc = qmc,res = res,resc = resc))
}
Estim = lapply(seq(1:(dim(df)[1])),prob_estim, Gamma = Gamma)
qm = sapply(Estim, "[[","qm")     # Median
qmc = sapply(Estim, "[[","qmc")   # Median of original paper
qi = sapply(Estim, "[[","qi")     # 0.05 quantile
qs = sapply(Estim, "[[","qs")     # 0.95 quantile
qic = sapply(Estim, "[[","qic")   # 0.05 quantile of original paper
qsc = sapply(Estim, "[[","qsc")   #0.95 quantile of original paper
dif = sapply(Estim, '[[',"dif")   # dif between estimated functions distributions from both approaches
dif_df = as.data.frame(cbind(apply(dif, 2, mean),apply(dif, 2, min),apply(dif, 2, max)))
names(dif_df) = c("Mean", "Minimum","Maximum")
library("reshape2")
library("ggplot2")
